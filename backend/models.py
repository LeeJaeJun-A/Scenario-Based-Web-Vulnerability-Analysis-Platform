import enum

class VulType(enum.Enum):
    ADMINISTRATOR_PAGE_EXPOSURE = '관리자 페이지 노출'
    AUTOMATED_ATTACK_VULNERABILITIES = '자동화 공격'
    BUFFER_OVERFLOW = 'Buffer Overflow'
    COOKIE_MODIFICATION = '쿠키 변조'
    CSRF_JUTONGI = 'CSRF (주요통신기반시설)'
    DIRECTORY_TRAVERSAL = 'Directory Traversal'
    FORMAT_STRING = 'Format String'
    INSUFFICIENT_AUTHENTICATION = '불충분한 인증'
    INSUFFICIENT_AUTHORIZATION = '불충분한 인가'
    INSUFFICIENT_SESSION_EXPIRATION = '불충분한 세션 만료'
    LDAP_INJECTION = 'LDAP Injection'
    LOCATION_DISCLOSURE = '위치 공개'
    MALICIOUS_CONTENT = '악성 콘텐츠'
    MISSING_PROCESS_VALIDATION = '프로세스 검증 누락'
    PLAIN_TEXT_TRANSFER = '데이터 평문 전송'
    ROUTE_TRACKING = '경로 추적'
    RUN_OS_COMMAND = '운영체제 명령 실행'
    SESSION_FIXATION = '세션 고정'
    SESSION_PREDICTION = '세션 예측'
    SQL_INJECTION_JUTONGI = 'SQL Injection (주요통신기반시설)'
    SSI_INJECTION = 'SSI Injection'
    SSRF_JUTONGI = 'SSRF (주요통신기반시설)'
    WEAK_STRING_STRENGTH = '약한 문자열 강도'
    XPATH_INJECTION = 'XPath Injection'
    XSS_JUTONGI = 'XSS (주요통신기반시설)'
    SSRF_OWASP = 'SSRF (OWASP)'
    IDENTIFICATION_AUTHENTICATION_FAILURE = 'Identification & Authentication Failure'
    SQL_INJECTION_OWASP = 'SQL Injection (OWASP)'
    XSS_OWASP = 'XSS (OWASP)'
    SQL_INJECTION_CVE = 'SQL Injection (CVE)'
    XSS_CVE = 'XSS (CVE)'
    CSRF_CVE = 'CSRF (CVE)'
    SSRF_CVE = 'SSRF (CVE)'
    XXE_INJECTION = 'XXE injection'

# Need to update
class VulLevel(enum.Enum):
    def __init__(self):
        self.levels = {
            VulType.SQL_INJECTION_JUTONGI: "High",
            VulType.ADMINISTRATOR_PAGE_EXPOSURE: "High",
            VulType.XSS_JUTONGI: "High",
            VulType.CSRF_JUTONGI: "High",
            VulType.BUFFER_OVERFLOW: "High"
        }

    def get_level(self, vul_type):
        return self.levels.get(vul_type, "Level is not found")
    
# Need to update
class VulTips():
    def __init__(self):
        self.tips = {
            (VulType.SQL_INJECTION_JUTONGI, 1): "Use parameterized queries to prevent SQL Injection.",
            (VulType.SQL_INJECTION_JUTONGI, 2): "Monitor database logs for suspicious activity.",
            (VulType.SQL_INJECTION_JUTONGI, 3): "Apply input validation to mitigate SQL Injection.",
            (VulType.XSS_JUTONGI, 1): "Use output encoding to prevent XSS.",
            (VulType.XSS_JUTONGI, 2): "Use a Content Security Policy (CSP) to detect XSS.",
            (VulType.XSS_JUTONGI, 3): "Apply input validation to mitigate XSS.",
            (VulType.CSRF_JUTONGI, 1): "Use anti-CSRF tokens to prevent CSRF.",
            (VulType.CSRF_JUTONGI, 2): "Monitor for unusual user activity to detect CSRF.",
            (VulType.CSRF_JUTONGI, 3): "Ensure proper session management to mitigate CSRF.",
            (VulType.BUFFER_OVERFLOW, 1): "Use bounds checking to prevent Buffer Overflow.",
            (VulType.BUFFER_OVERFLOW, 2): "Use static analysis tools to detect Buffer Overflow vulnerabilities.",
            (VulType.BUFFER_OVERFLOW, 3): "Apply stack canaries to mitigate Buffer Overflow."
        }

    def get_tip(self, vul_type, tip_type):
        return self.tips.get((vul_type, tip_type), "Tip is not found.")